<resources>
    <string name="app_name">RxjavaDemo</string>



    <string name="flowable">Flowable是RxJava2.x中新增的，专门用于应对背压（Backpressure）问题。\n
                所谓背压，即生产者的速度大于消费者的速度带来的问题\n
                比如在Android中常见的点击事件，点击过快则经常会造成点击两次的效果。\n
                其中，Flowable默认队列大小为128.\n
                通过Flowable我们可以自定义背压处理策略。\n
                其中还需要注意的一点在于，Flowable并不是订阅就开始发送数据，\n
                而是需等到执行Subscription#request才能开始发送数据。\n
                 当然，使用简化subscribe订阅方法会默认指定Long.MAX_VALUE,而无需手动指定\n
                手动指定的例子如下：\n

Flowable.range(1,10).subscribe(new Subscriber{\n
    @Override\n
    public void onSubscribe(Subscription s) {\n
        s.request(Long.MAX_VALUE);//设置请求数\n
    }\n

    @Override\n
    public void onNext(Integer integer) {\n
\n
    }\n

    @Override\n
    public void onError(Throwable t) {\n
\n
    }\n
\n
    @Override\n
    public void onComplete() {\n
\n
    }\n
});\n
    \n
        \n
        \n
        \n
        \n
        \n


        Flowable Integer upstream = Flowable.create(new FlowableOnSubscribe Integer() {\n
            @Override\n
            public void subscribe(FlowableEmitter Integer emitter) throws Exception {\n

                Log.d(TAG, "emit 1");\n
                emitter.onNext(1);\n
                Log.d(TAG, "emit 2");\n
                emitter.onNext(2);\n
                Log.d(TAG, "emit 3");\n
                emitter.onNext(3);\n
                Log.d(TAG, "emit complete");\n
                emitter.onComplete();\n
            }\n
        }, BackpressureStrategy.ERROR); //增加了一个参数\n
\n
        Subscriber Integer downstream = new Subscriber Integer() {\n

            @Override\n
            public void onSubscribe(Subscription s) {\n
                Log.d(TAG, "onSubscribe");\n
                s.request(Long.MAX_VALUE);  //注意这句代码\n
            }\n

            @Override\n
            public void onNext(Integer integer) {\n
                Log.d(TAG, "onNext: " + integer);\n
\n
            }\n

            @Override\n
            public void onError(Throwable t) {\n
                 Log.w(TAG, "onError: ", t);\n
            }\n
\n
            @Override\n
            public void onComplete() {\n
                Log.d(TAG, "onComplete");\n
            }\n
        };\n

        upstream.subscribe(downstream);\n
        \n\n\n\n

        运行结果
        -----------------------------------------------------------------------------------------
        D/TAG: onSubscribe   \n
        D/TAG: emit 1        \n
        D/TAG: onNext: 1     \n
        D/TAG: emit 2        \n
        D/TAG: onNext: 2     \n
        D/TAG: emit 3        \n
        D/TAG: onNext: 3     \n
        D/TAG: emit complete \n
        D/TAG: onComplete\n


        \n\n\n\n
        ------------------------
        这是因为Flowable在设计的时候采用了一种新的思路也就是响应式拉取的方式来更好的解决上下游流速不均衡的问题, 与我们之前所讲的控制数量和控制速度不太一样, 这种方式用通俗易懂的话来说就好比是叶问打鬼子, 我们把上游看成小日本, 把下游当作叶问, 当调用Subscription.request(1)时, 叶问就说我要打一个! 然后小日本就拿出一个鬼子给叶问, 让他打, 等叶问打死这个鬼子之后, 再次调用request(10), 叶问就又说我要打十个! 然后小日本又派出十个鬼子给叶问, 然后就在边上看热闹, 看叶问能不能打死十个鬼子, 等叶问打死十个鬼子后再继续要鬼子接着打...

所以我们把request当做是一种能力, 当成下游处理事件的能力, 下游能处理几个就告诉上游我要几个, 这样只要上游根据下游的处理能力来决定发送多少事件, 就不会造成一窝蜂的发出一堆事件来, 从而导致OOM. 这也就完美的解决之前我们所学到的两种方式的缺陷, 过滤事件会导致事件丢失, 减速又可能导致性能损失. 而这种方式既解决了事件丢失的问题, 又解决了速度的问题, 完美 !

但是太完美的东西也就意味着陷阱也会很多, 你可能只是被它的外表所迷惑, 失去了理智, 如果你滥用或者不遵守规则, 一样会吃到苦头.

比如这里需要注意的是, 只有当上游正确的实现了如何根据下游的处理能力来发送事件的时候, 才能达到这种效果, 如果上游根本不管下游的处理能力, 一股脑的瞎他妈发事件, 仍然会产生上下游流速不均衡的问题, 这就好比小日本管他叶问要打几个, 老子直接拿出1万个鬼子, 这尼玛有种打死给我看看? 那么如何正确的去实现上游呢, 这里先卖个关子, 之后我们再来讲解.

学习了request, 我们就可以解释上面的两段代码了.

首先第一个同步的代码, 为什么上游发送第一个事件后下游就抛出了MissingBackpressureException异常, 这是因为下游没有调用request, 上游就认为下游没有处理事件的能力, 而这又是一个同步的订阅, 既然下游处理不了, 那上游不可能一直等待吧, 如果是这样, 万一这两根水管工作在主线程里, 界面不就卡死了吗, 因此只能抛个异常来提醒我们. 那如何解决这种情况呢, 很简单啦, 下游直接调用request(Long.MAX_VALUE)就行了, 或者根据上游发送事件的数量来request就行了, 比如这里request(3)就可以了.

然后我们再来看看第二段代码, 为什么上下游没有工作在同一个线程时, 上游却正确的发送了所有的事件呢? 这是因为在Flowable里默认有一个大小为128的水缸, 当上下游工作在不同的线程中时, 上游就会先把事件发送到这个水缸中, 因此, 下游虽然没有调用request, 但是上游在水缸中保存着这些事件, 只有当下游调用request时, 才从水缸里取出事件发给下游.

    </string>








</resources>
